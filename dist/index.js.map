{"version":3,"sources":["index.js"],"names":["reducers","callbacks","middlewares","state","callbackOnion","isArray","obj","constructor","Array","register","actions","reducer","process","env","NODE_ENV","console","warn","i","len","length","action","push","use","middleware","priority","unshift","p","m","coreFunction","newState","type","dispatch","forEach","el","idx","hasOwnProperty","sort","a","b","reduce","nextLayer","layer","currentAction","listen","callback","unlisten","index","indexOf","splice","getState","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["/*\n * Minimux %VERSION%\n * Author: Steven Barnett (stevendesu) <steven.abarnett@gmail.com>\n * License: MIT +no-false-attribs (https://spdx.org/licenses/MITNFA.html)\n *\n * I made this library because I liked the ideology of Redux, but not the\n * implementation. This is my attempt to rebuild Redux with absolute minimal\n * functionality and to allow for absolute minimal bootstrapping in order to\n * write effective code.\n *\n * There are four main API endpoints:\n *  - dispatch([actions])\n *     This is the only valid way to modify the state\n *  - register([actions], reducer)\n *     When an action is thrown, apply the reducers\n *  - listen(callbacks)\n *     Callback will be called with the current state whenever state changes\n *  - use(middleware, [priority])\n *     Applies middleware to the dispatch function (see documentation)\n */\n\nconst reducers = {};\nconst callbacks = [];\nconst middlewares = [];\n\nlet state = {};\n\n// The \"onion\" describes the layers of middleware that we must parse through\n// in order to execute our action.\nlet callbackOnion = null;\n\n// Faster than Array.isArray:\nconst isArray = (obj) => { return obj.constructor === Array; };\n\nconst register = (actions, reducer) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof actions !== \"string\" && (typeof actions !== \"object\" || !Array.isArray(actions))) {\n\t\t\tthrow \"Invalid type (\" + (typeof actions) + \") for argument \\\"actions\\\" passed to listen. Expected string.\";\n\t\t}\n\t\tif (typeof reducer !== \"function\") {\n\t\t\tthrow \"Invalid type (\" + (typeof reducer) + \") for argument \\\"reducer\\\" passed to listen. Expected \" +\n\t\t\t      \"function.\";\n\t\t}\n\t\tif (callbackOnion) {\n\t\t\tconsole.warn(\"You have attempted to add a new reducer after the state was initialized (an action was \" +\n\t\t\t             \"thrown). This is illegal.\");\n\t\t}\n\t}\n\tif (!callbackOnion) {\n\t\tif (!isArray(actions)) {\n\t\t\tactions = [actions];\n\t\t}\n\t\t// For loops are faster than forEach\n\t\tfor (let i = 0, len = actions.length; i < len; i++) {\n\t\t\tconst action = actions[i];\n\t\t\treducers[action] = reducers[action] || [];\n\t\t\treducers[action].push(reducer);\n\t\t}\n\t}\n};\n\nconst use = (middleware, priority = 0) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof middleware !== \"function\") {\n\t\t\tthrow \"Invalid type (\" + (typeof middleware) + \") for argument \\\"middleware\\\" passed to listen. Expected \" +\n\t\t\t      \"function.\";\n\t\t}\n\t\tif (typeof priority !== \"number\") {\n\t\t\tthrow \"Invalid type (\" + (typeof priority) + \") for argument \\\"priority\\\" passed to listen. Expected \" +\n\t\t\t      \"number.\";\n\t\t}\n\t\tif (callbackOnion) {\n\t\t\tconsole.warn(\"You have attempted to add new middleware after the state was initialized (an action was \" +\n\t\t\t             \"thrown). This is illegal.\");\n\t\t}\n\t}\n\tif (!callbackOnion) {\n\t\tmiddlewares.unshift({ p: priority, m: middleware });\n\t}\n};\n\nconst coreFunction = (action) => {\n\tlet newState = state;\n\tif (reducers[action.type]) {\n\t\t// For loops are faster than forEach\n\t\tfor (let i = 0, len = reducers[action.type].length; i < len; i++) {\n\t\t\tnewState = reducers[action.type](newState, action);\n\t\t}\n\t}\n\treturn newState;\n};\n\nconst dispatch = (actions) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof actions !== \"object\") {\n\t\t\tthrow \"Invalid type (\" + (typeof actions) + \") for argument \\\"action\\\" passed to dispatch. Expected \" +\n\t\t\t      \"object or array of objects.\";\n\t\t}\n\t\tif (isArray(actions)) {\n\t\t\tactions.forEach((el, idx) => {\n\t\t\t\tif (typeof el !== \"object\" || isArray(el)) {\n\t\t\t\t\tthrow \"Invalid type (\" + (typeof el) + \") for action at index \" + idx + \" passed to dispatch. \" +\n\t\t\t\t\t      \"Expected object.\";\n\t\t\t\t}\n\t\t\t\tif (!el.hasOwnProperty(\"type\")) {\n\t\t\t\t\tthrow \"Action at index \" + idx + \" passed to dispatch was missing required property: \\\"type\\\"\";\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (!actions.hasOwnProperty(\"type\")) {\n\t\t\tthrow \"Action passed to dispatch was missing required property: \\\"type\\\"\";\n\t\t}\n\t}\n\tif (!callbackOnion) {\n\t\tmiddlewares.sort((a, b) => {\n\t\t\treturn a.p - b.p;\n\t\t});\n\t\tcallbackOnion = middlewares.reduce((nextLayer, layer) => {\n\t\t\treturn (currentAction) => {\n\t\t\t\treturn layer.m(currentAction, nextLayer);\n\t\t\t};\n\t\t}, coreFunction);\n\t}\n\tif (!isArray(actions)) {\n\t\tactions = [actions];\n\t}\n\t// For loops are faster than forEach\n\t// Although length caching only improved performance when there are more than 2-3 elements\n\t// USUALLY dispatch() will be called with 1 action at a time\n\tvar i;\n\tfor (i = 0; i < actions.length; i++) {\n\t\tstate = callbackOnion(actions[i]);\n\t}\n\tfor (i = 0; i < callbacks.length; i++) {\n\t\tcallbacks[i](state);\n\t}\n};\n\nconst listen = (callback) => {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tif (typeof callback !== \"function\") {\n\t\t\tthrow \"Invalid type (\" + (typeof callback) + \") for argument \\\"callback\\\" passed to listen. Expected \" +\n\t\t\t      \"function.\";\n\t\t}\n\t}\n\tcallbacks.push(callback);\n};\n\nconst unlisten = (callback) => {\n\tconst index = callbacks.indexOf(callback);\n\tif (index !== -1) {\n\t\tcallbacks.splice(index, 1);\n\t}\n};\n\nconst getState = () => {\n\treturn state;\n};\n\n// Switching to CommonJS allowed a bit better name mangling for dat mad compression\nmodule.exports = {\n\tgetState,\n\tdispatch,\n\tregister,\n\tlisten,\n\tunlisten,\n\tuse\n};\n"],"sourceRoot":"/source/"}